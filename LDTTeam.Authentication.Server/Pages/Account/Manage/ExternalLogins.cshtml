@page
@using LDTTeam.Authentication.Server.Pages.Account.Manage
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@model ExternalLoginsModel
@{
    ViewData["Title"] = "Manage your external logins";
    ViewData["ActivePage"] = ManageNavPages.ExternalLogins;
}

<partial name="_StatusMessage" for="StatusMessage" />
@if (Model.CurrentLogins?.Count > 0)
{
    <h4>Registered Logins</h4>
    <table class="table">
        <tbody>
            @foreach (UserLoginInfo login in Model.CurrentLogins)
            {
                <tr>
                    <td id="@($"login-provider-{login.LoginProvider}")">@login.ProviderDisplayName</td>
                    <td>
                        @if (Model.ShowRemoveButton)
                        {
                            <form id="@($"remove-login-{login.LoginProvider}")" asp-page-handler="RemoveLogin" method="post">
                                <div>
                                    <input asp-for="@login.LoginProvider" name="LoginProvider" type="hidden" />
                                    <input asp-for="@login.ProviderKey" name="ProviderKey" type="hidden" />
                                    <button type="submit" class="btn btn-primary" title="Remove this @login.ProviderDisplayName login from your account">Remove</button>
                                </div>
                            </form>
                        }
                        else
                        {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
@if (Model.OtherLogins?.Count > 0)
{
    <h4>Add another service to log in.</h4>
    <hr />
    <form id="link-login-form" asp-page-handler="LinkLogin" method="post" class="form-horizontal">
        <div id="socialLoginList">
            <p>
                @foreach (AuthenticationScheme provider in Model.OtherLogins)
                {
                    <button id="@($"link-login-button-{provider.Name}")" type="submit" class="btn btn-primary" name="provider" value="@provider.Name" title="Log in using your @provider.DisplayName account">@provider.DisplayName</button>
                }
            </p>
        </div>
    </form>
}
@if (Model.CurrentLogins?.Any(x => x.LoginProvider == "Minecraft") != true)
{
    <h4>Add Minecraft Acount (Use button above if you have a microsoft linked account, this field is temporary!)</h4>
    <hr/>
    <form id="link-minecraft-form" asp-page-handler="LinkMinecraft" method="post" class="form-horizontal">
        <div class="form-group">
            <label asp-for="Input.MinecraftUsername"></label>
            <input asp-for="Input.MinecraftUsername" class="form-control"/>
            <span asp-validation-for="Input.MinecraftUsername" class="text-danger"></span>
        </div>
        @if (Model.MinecraftId != null)
        {
            <p class="fw-lighter">@Model.MinecraftId</p>
        }
        <button id="update-profile-button" type="submit" class="btn btn-primary">Submit</button>
    </form>
}
